작업을 하다가 변경사항이 발생하면 그것을 git이 기록하고 저장을 할텐데 그렇게 되려면 일련의 과정이 필요하다. 일단은 타임캡슐(버전)에 변경사항들을 저장한다. 그리고 그 타임캡슐을 땅에 묻어야 할텐데 이것을 commit한다고 한다.

지금 git status를 입력해 보면 git이관리하는 폴더와 파일들이 나오겠지만 no commits yet이라는 메세지와 untracted files라는 메세지가 나오는 것을 확인 할 수 있을 것이다. 프로젝트의 변경사항들을 타임캡슐(버전)에 담지 않았기 때문이다.

담을려렴 git add를 사용을 한다. tigers.yaml파일을 담아 보자

터미널에 git add 1-1tigers.yaml을 입력해보면 상태가 변화한 것을 확인할 수 있을 것이다.

이처럼 하나의 파일이 아닌 폴더 안의 모든 파일을 할려면 .을 붙여주면 된다.
git add.

여기까지 했으면 1-1tigers.yaml의 변경사항을 타임캡슐에 담았다. 이제 땅에 묻어야 한다. 즉 commit해야 한다. git에서 commit한다는 것은 새로운 버전을 만든다는 뜻이다.  
git commit -m " "를 활용해서 해주면 된다. 그 다음 git status를 입력해 보면 내가 commit한 것은 나오지 않는 것을 볼 수 있다. 
왜냐면 commit을 통해 버전이 저장이 되었기 때문에 현재의 버전에는 변화가 없다는 뜻이다.

git log를 입력해 보면 내가 입력한 커밋메세지가 나오는 것을 확인 해 볼 수 있고 저장이 된 것을 확인해 볼 수 있다.

이렇게 저장을 마친 상태에서 leopards라는 새로운 파일을 하나 더 만들어 보자. 그리고 git status를 입력해 보자

그러면 leopard가 추가되었다는 메세지가 나타날 것이다. git diff라는 것도 있는데 이건 변경사항들을 더 구체적으로 보여주는 명령어 이다. 하지만 여기서 leopard는 아직 깃이 관리 해보지 않은 파일 즉 add가 되지 않은 파일이기 때문에 git diff에는 나타나지 않는다.

자 지금까지를 정리해 보면 commit을 마친 후에 즉 버전을 한번 저장을 한 상태에서 새로운 파일을 추가했고, 텍스트도 일부분 추가 했다. 즉 저장 이후에 변경 사항이 생긴 것이기 때문에 다시 git add . 을 입력해주고 git status를 입력해주면 현재버전에서 git이 관리 하는 파일들이 나타날 것이다. 

commit의 과정을 살펴보면 git add 로 캡슐에 담은 다음 git commit -m ""으로 땅에 저장을 하는 순서이다. 그런데 이 두 과정을 한번에 처리할 수 도 있다. git commit -am "커밋메세지" 를 활용하면 add과정 없이 바로 commit 된다.